import Axios from 'axios'import router from '../router'import {BASEURL, RefreshTokenURL} from '@/utils/Constant'import axios from "axios";// Axios.defaults.withCredentials = truelet request = Axios.create({  baseURL: BASEURL})request.interceptors.request.use(config => {  let token = 'bearer ' + localStorage.getItem('access_token')  if (token !== null && token !== undefined && token !== '') {    config.headers.Authorization = token  }  return config}, error => {  return Promise.reject(error)})request.interceptors.response.use(response => {  const token = response.headers['authorization']  if (token !== null && token !== undefined && token !== "") {    localStorage.setItem("access_token", token)  }  return response.data}, error => {  if (error.response.status === 401) {    const token = localStorage.getItem('refresh_token')    if (token !== null && token !== undefined && token !== "") {      axios.post(BASEURL + RefreshTokenURL + localStorage.getItem('refresh_token')).then(res => {        localStorage.setItem("access_token", res.data.data.access_token)        localStorage.setItem("refresh_token", res.data.data.refresh_token)        localStorage.setItem("user", JSON.stringify(btoa(res.data.data.access_token.split('.')[1])))        return request.post(error.config)      }).catch(error => {        localStorage.removeItem("access_token")        localStorage.removeItem("refresh_token")        localStorage.removeItem("user")        router.push('/login')      })    }    return Promise.reject(error);  }  return Promise.resolve(error);})export default request